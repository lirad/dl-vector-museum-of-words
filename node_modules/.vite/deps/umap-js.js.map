{
  "version": 3,
  "sources": ["../../umap-js/dist/utils.js", "../../umap-js/dist/heap.js", "../../umap-js/dist/matrix.js", "../../umap-js/dist/tree.js", "../../umap-js/dist/nn_descent.js", "../../ml-levenberg-marquardt/node_modules/is-any-array/src/index.js", "../../ml-levenberg-marquardt/src/errorCalculation.js", "../../ml-levenberg-marquardt/src/step.js", "../../ml-levenberg-marquardt/src/index.js", "../../umap-js/dist/umap.js", "../../umap-js/dist/index.js"],
  "sourcesContent": ["\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reshape2d = exports.rejectionSample = exports.max2d = exports.max = exports.mean = exports.sum = exports.linear = exports.ones = exports.zeros = exports.filled = exports.range = exports.empty = exports.norm = exports.tauRand = exports.tauRandInt = void 0;\nfunction tauRandInt(n, random) {\n    return Math.floor(random() * n);\n}\nexports.tauRandInt = tauRandInt;\nfunction tauRand(random) {\n    return random();\n}\nexports.tauRand = tauRand;\nfunction norm(vec) {\n    var e_1, _a;\n    var result = 0;\n    try {\n        for (var vec_1 = __values(vec), vec_1_1 = vec_1.next(); !vec_1_1.done; vec_1_1 = vec_1.next()) {\n            var item = vec_1_1.value;\n            result += Math.pow(item, 2);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (vec_1_1 && !vec_1_1.done && (_a = vec_1.return)) _a.call(vec_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return Math.sqrt(result);\n}\nexports.norm = norm;\nfunction empty(n) {\n    var output = [];\n    for (var i = 0; i < n; i++) {\n        output.push(undefined);\n    }\n    return output;\n}\nexports.empty = empty;\nfunction range(n) {\n    return empty(n).map(function (_, i) { return i; });\n}\nexports.range = range;\nfunction filled(n, v) {\n    return empty(n).map(function () { return v; });\n}\nexports.filled = filled;\nfunction zeros(n) {\n    return filled(n, 0);\n}\nexports.zeros = zeros;\nfunction ones(n) {\n    return filled(n, 1);\n}\nexports.ones = ones;\nfunction linear(a, b, len) {\n    return empty(len).map(function (_, i) {\n        return a + i * ((b - a) / (len - 1));\n    });\n}\nexports.linear = linear;\nfunction sum(input) {\n    return input.reduce(function (sum, val) { return sum + val; });\n}\nexports.sum = sum;\nfunction mean(input) {\n    return sum(input) / input.length;\n}\nexports.mean = mean;\nfunction max(input) {\n    var max = 0;\n    for (var i = 0; i < input.length; i++) {\n        max = input[i] > max ? input[i] : max;\n    }\n    return max;\n}\nexports.max = max;\nfunction max2d(input) {\n    var max = 0;\n    for (var i = 0; i < input.length; i++) {\n        for (var j = 0; j < input[i].length; j++) {\n            max = input[i][j] > max ? input[i][j] : max;\n        }\n    }\n    return max;\n}\nexports.max2d = max2d;\nfunction rejectionSample(nSamples, poolSize, random) {\n    var result = zeros(nSamples);\n    for (var i = 0; i < nSamples; i++) {\n        var rejectSample = true;\n        while (rejectSample) {\n            var j = tauRandInt(poolSize, random);\n            var broken = false;\n            for (var k = 0; k < i; k++) {\n                if (j === result[k]) {\n                    broken = true;\n                    break;\n                }\n            }\n            if (!broken) {\n                rejectSample = false;\n            }\n            result[i] = j;\n        }\n    }\n    return result;\n}\nexports.rejectionSample = rejectionSample;\nfunction reshape2d(x, a, b) {\n    var rows = [];\n    var count = 0;\n    var index = 0;\n    if (x.length !== a * b) {\n        throw new Error('Array dimensions must match input length.');\n    }\n    for (var i = 0; i < a; i++) {\n        var col = [];\n        for (var j = 0; j < b; j++) {\n            col.push(x[index]);\n            index += 1;\n        }\n        rows.push(col);\n        count += 1;\n    }\n    return rows;\n}\nexports.reshape2d = reshape2d;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.smallestFlagged = exports.deheapSort = exports.buildCandidates = exports.uncheckedHeapPush = exports.heapPush = exports.rejectionSample = exports.makeHeap = void 0;\nvar utils = __importStar(require(\"./utils\"));\nfunction makeHeap(nPoints, size) {\n    var makeArrays = function (fillValue) {\n        return utils.empty(nPoints).map(function () {\n            return utils.filled(size, fillValue);\n        });\n    };\n    var heap = [];\n    heap.push(makeArrays(-1));\n    heap.push(makeArrays(Infinity));\n    heap.push(makeArrays(0));\n    return heap;\n}\nexports.makeHeap = makeHeap;\nfunction rejectionSample(nSamples, poolSize, random) {\n    var result = utils.zeros(nSamples);\n    for (var i = 0; i < nSamples; i++) {\n        var rejectSample = true;\n        var j = 0;\n        while (rejectSample) {\n            j = utils.tauRandInt(poolSize, random);\n            var broken = false;\n            for (var k = 0; k < i; k++) {\n                if (j === result[k]) {\n                    broken = true;\n                    break;\n                }\n            }\n            if (!broken)\n                rejectSample = false;\n        }\n        result[i] = j;\n    }\n    return result;\n}\nexports.rejectionSample = rejectionSample;\nfunction heapPush(heap, row, weight, index, flag) {\n    row = Math.floor(row);\n    var indices = heap[0][row];\n    var weights = heap[1][row];\n    var isNew = heap[2][row];\n    if (weight >= weights[0]) {\n        return 0;\n    }\n    for (var i = 0; i < indices.length; i++) {\n        if (index === indices[i]) {\n            return 0;\n        }\n    }\n    return uncheckedHeapPush(heap, row, weight, index, flag);\n}\nexports.heapPush = heapPush;\nfunction uncheckedHeapPush(heap, row, weight, index, flag) {\n    var indices = heap[0][row];\n    var weights = heap[1][row];\n    var isNew = heap[2][row];\n    if (weight >= weights[0]) {\n        return 0;\n    }\n    weights[0] = weight;\n    indices[0] = index;\n    isNew[0] = flag;\n    var i = 0;\n    var iSwap = 0;\n    while (true) {\n        var ic1 = 2 * i + 1;\n        var ic2 = ic1 + 1;\n        var heapShape2 = heap[0][0].length;\n        if (ic1 >= heapShape2) {\n            break;\n        }\n        else if (ic2 >= heapShape2) {\n            if (weights[ic1] > weight) {\n                iSwap = ic1;\n            }\n            else {\n                break;\n            }\n        }\n        else if (weights[ic1] >= weights[ic2]) {\n            if (weight < weights[ic1]) {\n                iSwap = ic1;\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            if (weight < weights[ic2]) {\n                iSwap = ic2;\n            }\n            else {\n                break;\n            }\n        }\n        weights[i] = weights[iSwap];\n        indices[i] = indices[iSwap];\n        isNew[i] = isNew[iSwap];\n        i = iSwap;\n    }\n    weights[i] = weight;\n    indices[i] = index;\n    isNew[i] = flag;\n    return 1;\n}\nexports.uncheckedHeapPush = uncheckedHeapPush;\nfunction buildCandidates(currentGraph, nVertices, nNeighbors, maxCandidates, random) {\n    var candidateNeighbors = makeHeap(nVertices, maxCandidates);\n    for (var i = 0; i < nVertices; i++) {\n        for (var j = 0; j < nNeighbors; j++) {\n            if (currentGraph[0][i][j] < 0) {\n                continue;\n            }\n            var idx = currentGraph[0][i][j];\n            var isn = currentGraph[2][i][j];\n            var d = utils.tauRand(random);\n            heapPush(candidateNeighbors, i, d, idx, isn);\n            heapPush(candidateNeighbors, idx, d, i, isn);\n            currentGraph[2][i][j] = 0;\n        }\n    }\n    return candidateNeighbors;\n}\nexports.buildCandidates = buildCandidates;\nfunction deheapSort(heap) {\n    var indices = heap[0];\n    var weights = heap[1];\n    for (var i = 0; i < indices.length; i++) {\n        var indHeap = indices[i];\n        var distHeap = weights[i];\n        for (var j = 0; j < indHeap.length - 1; j++) {\n            var indHeapIndex = indHeap.length - j - 1;\n            var distHeapIndex = distHeap.length - j - 1;\n            var temp1 = indHeap[0];\n            indHeap[0] = indHeap[indHeapIndex];\n            indHeap[indHeapIndex] = temp1;\n            var temp2 = distHeap[0];\n            distHeap[0] = distHeap[distHeapIndex];\n            distHeap[distHeapIndex] = temp2;\n            siftDown(distHeap, indHeap, distHeapIndex, 0);\n        }\n    }\n    return { indices: indices, weights: weights };\n}\nexports.deheapSort = deheapSort;\nfunction siftDown(heap1, heap2, ceiling, elt) {\n    while (elt * 2 + 1 < ceiling) {\n        var leftChild = elt * 2 + 1;\n        var rightChild = leftChild + 1;\n        var swap = elt;\n        if (heap1[swap] < heap1[leftChild]) {\n            swap = leftChild;\n        }\n        if (rightChild < ceiling && heap1[swap] < heap1[rightChild]) {\n            swap = rightChild;\n        }\n        if (swap === elt) {\n            break;\n        }\n        else {\n            var temp1 = heap1[elt];\n            heap1[elt] = heap1[swap];\n            heap1[swap] = temp1;\n            var temp2 = heap2[elt];\n            heap2[elt] = heap2[swap];\n            heap2[swap] = temp2;\n            elt = swap;\n        }\n    }\n}\nfunction smallestFlagged(heap, row) {\n    var ind = heap[0][row];\n    var dist = heap[1][row];\n    var flag = heap[2][row];\n    var minDist = Infinity;\n    var resultIndex = -1;\n    for (var i = 0; i > ind.length; i++) {\n        if (flag[i] === 1 && dist[i] < minDist) {\n            minDist = dist[i];\n            resultIndex = i;\n        }\n    }\n    if (resultIndex >= 0) {\n        flag[resultIndex] = 0;\n        return Math.floor(ind[resultIndex]);\n    }\n    else {\n        return -1;\n    }\n}\nexports.smallestFlagged = smallestFlagged;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCSR = exports.normalize = exports.eliminateZeros = exports.multiplyScalar = exports.maximum = exports.subtract = exports.add = exports.pairwiseMultiply = exports.identity = exports.transpose = exports.SparseMatrix = void 0;\nvar utils = __importStar(require(\"./utils\"));\nvar SparseMatrix = (function () {\n    function SparseMatrix(rows, cols, values, dims) {\n        this.entries = new Map();\n        this.nRows = 0;\n        this.nCols = 0;\n        if (rows.length !== cols.length || rows.length !== values.length) {\n            throw new Error('rows, cols and values arrays must all have the same length');\n        }\n        this.nRows = dims[0];\n        this.nCols = dims[1];\n        for (var i = 0; i < values.length; i++) {\n            var row = rows[i];\n            var col = cols[i];\n            this.checkDims(row, col);\n            var key = this.makeKey(row, col);\n            this.entries.set(key, { value: values[i], row: row, col: col });\n        }\n    }\n    SparseMatrix.prototype.makeKey = function (row, col) {\n        return row + \":\" + col;\n    };\n    SparseMatrix.prototype.checkDims = function (row, col) {\n        var withinBounds = row < this.nRows && col < this.nCols;\n        if (!withinBounds) {\n            throw new Error('row and/or col specified outside of matrix dimensions');\n        }\n    };\n    SparseMatrix.prototype.set = function (row, col, value) {\n        this.checkDims(row, col);\n        var key = this.makeKey(row, col);\n        if (!this.entries.has(key)) {\n            this.entries.set(key, { value: value, row: row, col: col });\n        }\n        else {\n            this.entries.get(key).value = value;\n        }\n    };\n    SparseMatrix.prototype.get = function (row, col, defaultValue) {\n        if (defaultValue === void 0) { defaultValue = 0; }\n        this.checkDims(row, col);\n        var key = this.makeKey(row, col);\n        if (this.entries.has(key)) {\n            return this.entries.get(key).value;\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    SparseMatrix.prototype.getAll = function (ordered) {\n        if (ordered === void 0) { ordered = true; }\n        var rowColValues = [];\n        this.entries.forEach(function (value) {\n            rowColValues.push(value);\n        });\n        if (ordered) {\n            rowColValues.sort(function (a, b) {\n                if (a.row === b.row) {\n                    return a.col - b.col;\n                }\n                else {\n                    return a.row - b.row;\n                }\n            });\n        }\n        return rowColValues;\n    };\n    SparseMatrix.prototype.getDims = function () {\n        return [this.nRows, this.nCols];\n    };\n    SparseMatrix.prototype.getRows = function () {\n        return Array.from(this.entries, function (_a) {\n            var _b = __read(_a, 2), key = _b[0], value = _b[1];\n            return value.row;\n        });\n    };\n    SparseMatrix.prototype.getCols = function () {\n        return Array.from(this.entries, function (_a) {\n            var _b = __read(_a, 2), key = _b[0], value = _b[1];\n            return value.col;\n        });\n    };\n    SparseMatrix.prototype.getValues = function () {\n        return Array.from(this.entries, function (_a) {\n            var _b = __read(_a, 2), key = _b[0], value = _b[1];\n            return value.value;\n        });\n    };\n    SparseMatrix.prototype.forEach = function (fn) {\n        this.entries.forEach(function (value) { return fn(value.value, value.row, value.col); });\n    };\n    SparseMatrix.prototype.map = function (fn) {\n        var vals = [];\n        this.entries.forEach(function (value) {\n            vals.push(fn(value.value, value.row, value.col));\n        });\n        var dims = [this.nRows, this.nCols];\n        return new SparseMatrix(this.getRows(), this.getCols(), vals, dims);\n    };\n    SparseMatrix.prototype.toArray = function () {\n        var _this = this;\n        var rows = utils.empty(this.nRows);\n        var output = rows.map(function () {\n            return utils.zeros(_this.nCols);\n        });\n        this.entries.forEach(function (value) {\n            output[value.row][value.col] = value.value;\n        });\n        return output;\n    };\n    return SparseMatrix;\n}());\nexports.SparseMatrix = SparseMatrix;\nfunction transpose(matrix) {\n    var cols = [];\n    var rows = [];\n    var vals = [];\n    matrix.forEach(function (value, row, col) {\n        cols.push(row);\n        rows.push(col);\n        vals.push(value);\n    });\n    var dims = [matrix.nCols, matrix.nRows];\n    return new SparseMatrix(rows, cols, vals, dims);\n}\nexports.transpose = transpose;\nfunction identity(size) {\n    var _a = __read(size, 1), rows = _a[0];\n    var matrix = new SparseMatrix([], [], [], size);\n    for (var i = 0; i < rows; i++) {\n        matrix.set(i, i, 1);\n    }\n    return matrix;\n}\nexports.identity = identity;\nfunction pairwiseMultiply(a, b) {\n    return elementWise(a, b, function (x, y) { return x * y; });\n}\nexports.pairwiseMultiply = pairwiseMultiply;\nfunction add(a, b) {\n    return elementWise(a, b, function (x, y) { return x + y; });\n}\nexports.add = add;\nfunction subtract(a, b) {\n    return elementWise(a, b, function (x, y) { return x - y; });\n}\nexports.subtract = subtract;\nfunction maximum(a, b) {\n    return elementWise(a, b, function (x, y) { return (x > y ? x : y); });\n}\nexports.maximum = maximum;\nfunction multiplyScalar(a, scalar) {\n    return a.map(function (value) {\n        return value * scalar;\n    });\n}\nexports.multiplyScalar = multiplyScalar;\nfunction eliminateZeros(m) {\n    var zeroIndices = new Set();\n    var values = m.getValues();\n    var rows = m.getRows();\n    var cols = m.getCols();\n    for (var i = 0; i < values.length; i++) {\n        if (values[i] === 0) {\n            zeroIndices.add(i);\n        }\n    }\n    var removeByZeroIndex = function (_, index) { return !zeroIndices.has(index); };\n    var nextValues = values.filter(removeByZeroIndex);\n    var nextRows = rows.filter(removeByZeroIndex);\n    var nextCols = cols.filter(removeByZeroIndex);\n    return new SparseMatrix(nextRows, nextCols, nextValues, m.getDims());\n}\nexports.eliminateZeros = eliminateZeros;\nfunction normalize(m, normType) {\n    var e_1, _a;\n    if (normType === void 0) { normType = \"l2\"; }\n    var normFn = normFns[normType];\n    var colsByRow = new Map();\n    m.forEach(function (_, row, col) {\n        var cols = colsByRow.get(row) || [];\n        cols.push(col);\n        colsByRow.set(row, cols);\n    });\n    var nextMatrix = new SparseMatrix([], [], [], m.getDims());\n    var _loop_1 = function (row) {\n        var cols = colsByRow.get(row).sort();\n        var vals = cols.map(function (col) { return m.get(row, col); });\n        var norm = normFn(vals);\n        for (var i = 0; i < norm.length; i++) {\n            nextMatrix.set(row, cols[i], norm[i]);\n        }\n    };\n    try {\n        for (var _b = __values(colsByRow.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var row = _c.value;\n            _loop_1(row);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return nextMatrix;\n}\nexports.normalize = normalize;\nvar normFns = (_a = {},\n    _a[\"max\"] = function (xs) {\n        var max = -Infinity;\n        for (var i = 0; i < xs.length; i++) {\n            max = xs[i] > max ? xs[i] : max;\n        }\n        return xs.map(function (x) { return x / max; });\n    },\n    _a[\"l1\"] = function (xs) {\n        var sum = 0;\n        for (var i = 0; i < xs.length; i++) {\n            sum += xs[i];\n        }\n        return xs.map(function (x) { return x / sum; });\n    },\n    _a[\"l2\"] = function (xs) {\n        var sum = 0;\n        for (var i = 0; i < xs.length; i++) {\n            sum += Math.pow(xs[i], 2);\n        }\n        return xs.map(function (x) { return Math.sqrt(Math.pow(x, 2) / sum); });\n    },\n    _a);\nfunction elementWise(a, b, op) {\n    var visited = new Set();\n    var rows = [];\n    var cols = [];\n    var vals = [];\n    var operate = function (row, col) {\n        rows.push(row);\n        cols.push(col);\n        var nextValue = op(a.get(row, col), b.get(row, col));\n        vals.push(nextValue);\n    };\n    var valuesA = a.getValues();\n    var rowsA = a.getRows();\n    var colsA = a.getCols();\n    for (var i = 0; i < valuesA.length; i++) {\n        var row = rowsA[i];\n        var col = colsA[i];\n        var key = row + \":\" + col;\n        visited.add(key);\n        operate(row, col);\n    }\n    var valuesB = b.getValues();\n    var rowsB = b.getRows();\n    var colsB = b.getCols();\n    for (var i = 0; i < valuesB.length; i++) {\n        var row = rowsB[i];\n        var col = colsB[i];\n        var key = row + \":\" + col;\n        if (visited.has(key))\n            continue;\n        operate(row, col);\n    }\n    var dims = [a.nRows, a.nCols];\n    return new SparseMatrix(rows, cols, vals, dims);\n}\nfunction getCSR(x) {\n    var entries = [];\n    x.forEach(function (value, row, col) {\n        entries.push({ value: value, row: row, col: col });\n    });\n    entries.sort(function (a, b) {\n        if (a.row === b.row) {\n            return a.col - b.col;\n        }\n        else {\n            return a.row - b.row;\n        }\n    });\n    var indices = [];\n    var values = [];\n    var indptr = [];\n    var currentRow = -1;\n    for (var i = 0; i < entries.length; i++) {\n        var _a = entries[i], row = _a.row, col = _a.col, value = _a.value;\n        if (row !== currentRow) {\n            currentRow = row;\n            indptr.push(i);\n        }\n        indices.push(col);\n        values.push(value);\n    }\n    return { indices: indices, values: values, indptr: indptr };\n}\nexports.getCSR = getCSR;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.searchFlatTree = exports.makeLeafArray = exports.makeForest = exports.FlatTree = void 0;\nvar utils = __importStar(require(\"./utils\"));\nvar FlatTree = (function () {\n    function FlatTree(hyperplanes, offsets, children, indices) {\n        this.hyperplanes = hyperplanes;\n        this.offsets = offsets;\n        this.children = children;\n        this.indices = indices;\n    }\n    return FlatTree;\n}());\nexports.FlatTree = FlatTree;\nfunction makeForest(data, nNeighbors, nTrees, random) {\n    var leafSize = Math.max(10, nNeighbors);\n    var trees = utils\n        .range(nTrees)\n        .map(function (_, i) { return makeTree(data, leafSize, i, random); });\n    var forest = trees.map(function (tree) { return flattenTree(tree, leafSize); });\n    return forest;\n}\nexports.makeForest = makeForest;\nfunction makeTree(data, leafSize, n, random) {\n    if (leafSize === void 0) { leafSize = 30; }\n    var indices = utils.range(data.length);\n    var tree = makeEuclideanTree(data, indices, leafSize, n, random);\n    return tree;\n}\nfunction makeEuclideanTree(data, indices, leafSize, q, random) {\n    if (leafSize === void 0) { leafSize = 30; }\n    if (indices.length > leafSize) {\n        var splitResults = euclideanRandomProjectionSplit(data, indices, random);\n        var indicesLeft = splitResults.indicesLeft, indicesRight = splitResults.indicesRight, hyperplane = splitResults.hyperplane, offset = splitResults.offset;\n        var leftChild = makeEuclideanTree(data, indicesLeft, leafSize, q + 1, random);\n        var rightChild = makeEuclideanTree(data, indicesRight, leafSize, q + 1, random);\n        var node = { leftChild: leftChild, rightChild: rightChild, isLeaf: false, hyperplane: hyperplane, offset: offset };\n        return node;\n    }\n    else {\n        var node = { indices: indices, isLeaf: true };\n        return node;\n    }\n}\nfunction euclideanRandomProjectionSplit(data, indices, random) {\n    var dim = data[0].length;\n    var leftIndex = utils.tauRandInt(indices.length, random);\n    var rightIndex = utils.tauRandInt(indices.length, random);\n    rightIndex += leftIndex === rightIndex ? 1 : 0;\n    rightIndex = rightIndex % indices.length;\n    var left = indices[leftIndex];\n    var right = indices[rightIndex];\n    var hyperplaneOffset = 0;\n    var hyperplaneVector = utils.zeros(dim);\n    for (var i = 0; i < hyperplaneVector.length; i++) {\n        hyperplaneVector[i] = data[left][i] - data[right][i];\n        hyperplaneOffset -=\n            (hyperplaneVector[i] * (data[left][i] + data[right][i])) / 2.0;\n    }\n    var nLeft = 0;\n    var nRight = 0;\n    var side = utils.zeros(indices.length);\n    for (var i = 0; i < indices.length; i++) {\n        var margin = hyperplaneOffset;\n        for (var d = 0; d < dim; d++) {\n            margin += hyperplaneVector[d] * data[indices[i]][d];\n        }\n        if (margin === 0) {\n            side[i] = utils.tauRandInt(2, random);\n            if (side[i] === 0) {\n                nLeft += 1;\n            }\n            else {\n                nRight += 1;\n            }\n        }\n        else if (margin > 0) {\n            side[i] = 0;\n            nLeft += 1;\n        }\n        else {\n            side[i] = 1;\n            nRight += 1;\n        }\n    }\n    var indicesLeft = utils.zeros(nLeft);\n    var indicesRight = utils.zeros(nRight);\n    nLeft = 0;\n    nRight = 0;\n    for (var i = 0; i < side.length; i++) {\n        if (side[i] === 0) {\n            indicesLeft[nLeft] = indices[i];\n            nLeft += 1;\n        }\n        else {\n            indicesRight[nRight] = indices[i];\n            nRight += 1;\n        }\n    }\n    return {\n        indicesLeft: indicesLeft,\n        indicesRight: indicesRight,\n        hyperplane: hyperplaneVector,\n        offset: hyperplaneOffset,\n    };\n}\nfunction flattenTree(tree, leafSize) {\n    var nNodes = numNodes(tree);\n    var nLeaves = numLeaves(tree);\n    var hyperplanes = utils\n        .range(nNodes)\n        .map(function () { return utils.zeros(tree.hyperplane ? tree.hyperplane.length : 0); });\n    var offsets = utils.zeros(nNodes);\n    var children = utils.range(nNodes).map(function () { return [-1, -1]; });\n    var indices = utils\n        .range(nLeaves)\n        .map(function () { return utils.range(leafSize).map(function () { return -1; }); });\n    recursiveFlatten(tree, hyperplanes, offsets, children, indices, 0, 0);\n    return new FlatTree(hyperplanes, offsets, children, indices);\n}\nfunction recursiveFlatten(tree, hyperplanes, offsets, children, indices, nodeNum, leafNum) {\n    var _a;\n    if (tree.isLeaf) {\n        children[nodeNum][0] = -leafNum;\n        (_a = indices[leafNum]).splice.apply(_a, __spread([0, tree.indices.length], tree.indices));\n        leafNum += 1;\n        return { nodeNum: nodeNum, leafNum: leafNum };\n    }\n    else {\n        hyperplanes[nodeNum] = tree.hyperplane;\n        offsets[nodeNum] = tree.offset;\n        children[nodeNum][0] = nodeNum + 1;\n        var oldNodeNum = nodeNum;\n        var res = recursiveFlatten(tree.leftChild, hyperplanes, offsets, children, indices, nodeNum + 1, leafNum);\n        nodeNum = res.nodeNum;\n        leafNum = res.leafNum;\n        children[oldNodeNum][1] = nodeNum + 1;\n        res = recursiveFlatten(tree.rightChild, hyperplanes, offsets, children, indices, nodeNum + 1, leafNum);\n        return { nodeNum: res.nodeNum, leafNum: res.leafNum };\n    }\n}\nfunction numNodes(tree) {\n    if (tree.isLeaf) {\n        return 1;\n    }\n    else {\n        return 1 + numNodes(tree.leftChild) + numNodes(tree.rightChild);\n    }\n}\nfunction numLeaves(tree) {\n    if (tree.isLeaf) {\n        return 1;\n    }\n    else {\n        return numLeaves(tree.leftChild) + numLeaves(tree.rightChild);\n    }\n}\nfunction makeLeafArray(rpForest) {\n    var e_1, _a;\n    if (rpForest.length > 0) {\n        var output = [];\n        try {\n            for (var rpForest_1 = __values(rpForest), rpForest_1_1 = rpForest_1.next(); !rpForest_1_1.done; rpForest_1_1 = rpForest_1.next()) {\n                var tree = rpForest_1_1.value;\n                output.push.apply(output, __spread(tree.indices));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rpForest_1_1 && !rpForest_1_1.done && (_a = rpForest_1.return)) _a.call(rpForest_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return output;\n    }\n    else {\n        return [[-1]];\n    }\n}\nexports.makeLeafArray = makeLeafArray;\nfunction selectSide(hyperplane, offset, point, random) {\n    var margin = offset;\n    for (var d = 0; d < point.length; d++) {\n        margin += hyperplane[d] * point[d];\n    }\n    if (margin === 0) {\n        var side = utils.tauRandInt(2, random);\n        return side;\n    }\n    else if (margin > 0) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nfunction searchFlatTree(point, tree, random) {\n    var node = 0;\n    while (tree.children[node][0] > 0) {\n        var side = selectSide(tree.hyperplanes[node], tree.offsets[node], point, random);\n        if (side === 0) {\n            node = tree.children[node][0];\n        }\n        else {\n            node = tree.children[node][1];\n        }\n    }\n    var index = -1 * tree.children[node][0];\n    return tree.indices[index];\n}\nexports.searchFlatTree = searchFlatTree;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeSearch = exports.makeInitializedNNSearch = exports.makeInitializations = exports.makeNNDescent = void 0;\nvar heap = __importStar(require(\"./heap\"));\nvar matrix = __importStar(require(\"./matrix\"));\nvar tree = __importStar(require(\"./tree\"));\nvar utils = __importStar(require(\"./utils\"));\nfunction makeNNDescent(distanceFn, random) {\n    return function nNDescent(data, leafArray, nNeighbors, nIters, maxCandidates, delta, rho, rpTreeInit) {\n        if (nIters === void 0) { nIters = 10; }\n        if (maxCandidates === void 0) { maxCandidates = 50; }\n        if (delta === void 0) { delta = 0.001; }\n        if (rho === void 0) { rho = 0.5; }\n        if (rpTreeInit === void 0) { rpTreeInit = true; }\n        var nVertices = data.length;\n        var currentGraph = heap.makeHeap(data.length, nNeighbors);\n        for (var i = 0; i < data.length; i++) {\n            var indices = heap.rejectionSample(nNeighbors, data.length, random);\n            for (var j = 0; j < indices.length; j++) {\n                var d = distanceFn(data[i], data[indices[j]]);\n                heap.heapPush(currentGraph, i, d, indices[j], 1);\n                heap.heapPush(currentGraph, indices[j], d, i, 1);\n            }\n        }\n        if (rpTreeInit) {\n            for (var n = 0; n < leafArray.length; n++) {\n                for (var i = 0; i < leafArray[n].length; i++) {\n                    if (leafArray[n][i] < 0) {\n                        break;\n                    }\n                    for (var j = i + 1; j < leafArray[n].length; j++) {\n                        if (leafArray[n][j] < 0) {\n                            break;\n                        }\n                        var d = distanceFn(data[leafArray[n][i]], data[leafArray[n][j]]);\n                        heap.heapPush(currentGraph, leafArray[n][i], d, leafArray[n][j], 1);\n                        heap.heapPush(currentGraph, leafArray[n][j], d, leafArray[n][i], 1);\n                    }\n                }\n            }\n        }\n        for (var n = 0; n < nIters; n++) {\n            var candidateNeighbors = heap.buildCandidates(currentGraph, nVertices, nNeighbors, maxCandidates, random);\n            var c = 0;\n            for (var i = 0; i < nVertices; i++) {\n                for (var j = 0; j < maxCandidates; j++) {\n                    var p = Math.floor(candidateNeighbors[0][i][j]);\n                    if (p < 0 || utils.tauRand(random) < rho) {\n                        continue;\n                    }\n                    for (var k = 0; k < maxCandidates; k++) {\n                        var q = Math.floor(candidateNeighbors[0][i][k]);\n                        var cj = candidateNeighbors[2][i][j];\n                        var ck = candidateNeighbors[2][i][k];\n                        if (q < 0 || (!cj && !ck)) {\n                            continue;\n                        }\n                        var d = distanceFn(data[p], data[q]);\n                        c += heap.heapPush(currentGraph, p, d, q, 1);\n                        c += heap.heapPush(currentGraph, q, d, p, 1);\n                    }\n                }\n            }\n            if (c <= delta * nNeighbors * data.length) {\n                break;\n            }\n        }\n        var sorted = heap.deheapSort(currentGraph);\n        return sorted;\n    };\n}\nexports.makeNNDescent = makeNNDescent;\nfunction makeInitializations(distanceFn) {\n    function initFromRandom(nNeighbors, data, queryPoints, _heap, random) {\n        for (var i = 0; i < queryPoints.length; i++) {\n            var indices = utils.rejectionSample(nNeighbors, data.length, random);\n            for (var j = 0; j < indices.length; j++) {\n                if (indices[j] < 0) {\n                    continue;\n                }\n                var d = distanceFn(data[indices[j]], queryPoints[i]);\n                heap.heapPush(_heap, i, d, indices[j], 1);\n            }\n        }\n    }\n    function initFromTree(_tree, data, queryPoints, _heap, random) {\n        for (var i = 0; i < queryPoints.length; i++) {\n            var indices = tree.searchFlatTree(queryPoints[i], _tree, random);\n            for (var j = 0; j < indices.length; j++) {\n                if (indices[j] < 0) {\n                    return;\n                }\n                var d = distanceFn(data[indices[j]], queryPoints[i]);\n                heap.heapPush(_heap, i, d, indices[j], 1);\n            }\n        }\n        return;\n    }\n    return { initFromRandom: initFromRandom, initFromTree: initFromTree };\n}\nexports.makeInitializations = makeInitializations;\nfunction makeInitializedNNSearch(distanceFn) {\n    return function nnSearchFn(data, graph, initialization, queryPoints) {\n        var e_1, _a;\n        var _b = matrix.getCSR(graph), indices = _b.indices, indptr = _b.indptr;\n        for (var i = 0; i < queryPoints.length; i++) {\n            var tried = new Set(initialization[0][i]);\n            while (true) {\n                var vertex = heap.smallestFlagged(initialization, i);\n                if (vertex === -1) {\n                    break;\n                }\n                var candidates = indices.slice(indptr[vertex], indptr[vertex + 1]);\n                try {\n                    for (var candidates_1 = (e_1 = void 0, __values(candidates)), candidates_1_1 = candidates_1.next(); !candidates_1_1.done; candidates_1_1 = candidates_1.next()) {\n                        var candidate = candidates_1_1.value;\n                        if (candidate === vertex ||\n                            candidate === -1 ||\n                            tried.has(candidate)) {\n                            continue;\n                        }\n                        var d = distanceFn(data[candidate], queryPoints[i]);\n                        heap.uncheckedHeapPush(initialization, i, d, candidate, 1);\n                        tried.add(candidate);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (candidates_1_1 && !candidates_1_1.done && (_a = candidates_1.return)) _a.call(candidates_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        }\n        return initialization;\n    };\n}\nexports.makeInitializedNNSearch = makeInitializedNNSearch;\nfunction initializeSearch(forest, data, queryPoints, nNeighbors, initFromRandom, initFromTree, random) {\n    var e_2, _a;\n    var results = heap.makeHeap(queryPoints.length, nNeighbors);\n    initFromRandom(nNeighbors, data, queryPoints, results, random);\n    if (forest) {\n        try {\n            for (var forest_1 = __values(forest), forest_1_1 = forest_1.next(); !forest_1_1.done; forest_1_1 = forest_1.next()) {\n                var tree_1 = forest_1_1.value;\n                initFromTree(tree_1, data, queryPoints, results, random);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (forest_1_1 && !forest_1_1.done && (_a = forest_1.return)) _a.call(forest_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    }\n    return results;\n}\nexports.initializeSearch = initializeSearch;\n", "const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n", "/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nexport default function errorCalculation(\n  data,\n  parameters,\n  parameterizedFunction,\n) {\n  let error = 0;\n  const func = parameterizedFunction(parameters);\n\n  for (let i = 0; i < data.x.length; i++) {\n    error += Math.abs(data.y[i] - func(data.x[i]));\n  }\n\n  return error;\n}\n", "import { inverse, Matrix } from 'ml-matrix';\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(\n  data,\n  evaluatedData,\n  params,\n  gradientDifference,\n  paramFunction,\n) {\n  const n = params.length;\n  const m = data.x.length;\n\n  let ans = new Array(n);\n\n  for (let param = 0; param < n; param++) {\n    ans[param] = new Array(m);\n    let auxParams = params.slice();\n    auxParams[param] += gradientDifference;\n    let funcParam = paramFunction(auxParams);\n\n    for (let point = 0; point < m; point++) {\n      ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);\n    }\n  }\n  return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @return {Matrix}\n */\nfunction matrixFunction(data, evaluatedData) {\n  const m = data.x.length;\n\n  let ans = new Array(m);\n\n  for (let point = 0; point < m; point++) {\n    ans[point] = [data.y[point] - evaluatedData[point]];\n  }\n\n  return new Matrix(ans);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nexport default function step(\n  data,\n  params,\n  damping,\n  gradientDifference,\n  parameterizedFunction,\n) {\n  let value = damping * gradientDifference * gradientDifference;\n  let identity = Matrix.eye(params.length, params.length, value);\n\n  const func = parameterizedFunction(params);\n\n  let evaluatedData = new Float64Array(data.x.length);\n  for (let i = 0; i < data.x.length; i++) {\n    evaluatedData[i] = func(data.x[i]);\n  }\n\n  let gradientFunc = gradientFunction(\n    data,\n    evaluatedData,\n    params,\n    gradientDifference,\n    parameterizedFunction,\n  );\n  let matrixFunc = matrixFunction(data, evaluatedData);\n  let inverseMatrix = inverse(\n    identity.add(gradientFunc.mmul(gradientFunc.transpose())),\n  );\n\n  params = new Matrix([params]);\n  params = params.sub(\n    inverseMatrix\n      .mmul(gradientFunc)\n      .mmul(matrixFunc)\n      .mul(gradientDifference)\n      .transpose(),\n  );\n\n  return params.to1DArray();\n}\n", "import isArray from 'is-any-array';\n\nimport errorCalculation from './errorCalculation';\nimport step from './step';\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.minValues] - Minimum allowed values for parameters\n * @param {Array<number>} [options.maxValues] - Maximum allowed values for parameters\n * @param {Array<number>} [options.initialValues] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nexport default function levenbergMarquardt(\n  data,\n  parameterizedFunction,\n  options = {},\n) {\n  let {\n    maxIterations = 100,\n    gradientDifference = 10e-2,\n    damping = 0,\n    errorTolerance = 10e-3,\n    minValues,\n    maxValues,\n    initialValues,\n  } = options;\n\n  if (damping <= 0) {\n    throw new Error('The damping option must be a positive number');\n  } else if (!data.x || !data.y) {\n    throw new Error('The data parameter must have x and y elements');\n  } else if (\n    !isArray(data.x) ||\n    data.x.length < 2 ||\n    !isArray(data.y) ||\n    data.y.length < 2\n  ) {\n    throw new Error(\n      'The data parameter elements must be an array with more than 2 points',\n    );\n  } else if (data.x.length !== data.y.length) {\n    throw new Error('The data parameter elements must have the same size');\n  }\n\n  let parameters =\n    initialValues || new Array(parameterizedFunction.length).fill(1);\n  let parLen = parameters.length;\n  maxValues = maxValues || new Array(parLen).fill(Number.MAX_SAFE_INTEGER);\n  minValues = minValues || new Array(parLen).fill(Number.MIN_SAFE_INTEGER);\n\n  if (maxValues.length !== minValues.length) {\n    throw new Error('minValues and maxValues must be the same size');\n  }\n\n  if (!isArray(parameters)) {\n    throw new Error('initialValues must be an array');\n  }\n\n  let error = errorCalculation(data, parameters, parameterizedFunction);\n\n  let converged = error <= errorTolerance;\n\n  let iteration;\n  for (iteration = 0; iteration < maxIterations && !converged; iteration++) {\n    parameters = step(\n      data,\n      parameters,\n      damping,\n      gradientDifference,\n      parameterizedFunction,\n    );\n\n    for (let k = 0; k < parLen; k++) {\n      parameters[k] = Math.min(\n        Math.max(minValues[k], parameters[k]),\n        maxValues[k],\n      );\n    }\n\n    error = errorCalculation(data, parameters, parameterizedFunction);\n    if (isNaN(error)) break;\n    converged = error <= errorTolerance;\n  }\n\n  return {\n    parameterValues: parameters,\n    parameterError: error,\n    iterations: iteration,\n  };\n}\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initTransform = exports.resetLocalConnectivity = exports.fastIntersection = exports.findABParams = exports.cosine = exports.euclidean = exports.UMAP = void 0;\nvar heap = __importStar(require(\"./heap\"));\nvar matrix = __importStar(require(\"./matrix\"));\nvar nnDescent = __importStar(require(\"./nn_descent\"));\nvar tree = __importStar(require(\"./tree\"));\nvar utils = __importStar(require(\"./utils\"));\nvar ml_levenberg_marquardt_1 = __importDefault(require(\"ml-levenberg-marquardt\"));\nvar SMOOTH_K_TOLERANCE = 1e-5;\nvar MIN_K_DIST_SCALE = 1e-3;\nvar UMAP = (function () {\n    function UMAP(params) {\n        var _this = this;\n        if (params === void 0) { params = {}; }\n        this.learningRate = 1.0;\n        this.localConnectivity = 1.0;\n        this.minDist = 0.1;\n        this.nComponents = 2;\n        this.nEpochs = 0;\n        this.nNeighbors = 15;\n        this.negativeSampleRate = 5;\n        this.random = Math.random;\n        this.repulsionStrength = 1.0;\n        this.setOpMixRatio = 1.0;\n        this.spread = 1.0;\n        this.transformQueueSize = 4.0;\n        this.targetMetric = \"categorical\";\n        this.targetWeight = 0.5;\n        this.targetNNeighbors = this.nNeighbors;\n        this.distanceFn = euclidean;\n        this.isInitialized = false;\n        this.rpForest = [];\n        this.embedding = [];\n        this.optimizationState = new OptimizationState();\n        var setParam = function (key) {\n            if (params[key] !== undefined)\n                _this[key] = params[key];\n        };\n        setParam('distanceFn');\n        setParam('learningRate');\n        setParam('localConnectivity');\n        setParam('minDist');\n        setParam('nComponents');\n        setParam('nEpochs');\n        setParam('nNeighbors');\n        setParam('negativeSampleRate');\n        setParam('random');\n        setParam('repulsionStrength');\n        setParam('setOpMixRatio');\n        setParam('spread');\n        setParam('transformQueueSize');\n    }\n    UMAP.prototype.fit = function (X) {\n        this.initializeFit(X);\n        this.optimizeLayout();\n        return this.embedding;\n    };\n    UMAP.prototype.fitAsync = function (X, callback) {\n        if (callback === void 0) { callback = function () { return true; }; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.initializeFit(X);\n                        return [4, this.optimizeLayoutAsync(callback)];\n                    case 1:\n                        _a.sent();\n                        return [2, this.embedding];\n                }\n            });\n        });\n    };\n    UMAP.prototype.setSupervisedProjection = function (Y, params) {\n        if (params === void 0) { params = {}; }\n        this.Y = Y;\n        this.targetMetric = params.targetMetric || this.targetMetric;\n        this.targetWeight = params.targetWeight || this.targetWeight;\n        this.targetNNeighbors = params.targetNNeighbors || this.targetNNeighbors;\n    };\n    UMAP.prototype.setPrecomputedKNN = function (knnIndices, knnDistances) {\n        this.knnIndices = knnIndices;\n        this.knnDistances = knnDistances;\n    };\n    UMAP.prototype.initializeFit = function (X) {\n        if (X.length <= this.nNeighbors) {\n            throw new Error(\"Not enough data points (\" + X.length + \") to create nNeighbors: \" + this.nNeighbors + \".  Add more data points or adjust the configuration.\");\n        }\n        if (this.X === X && this.isInitialized) {\n            return this.getNEpochs();\n        }\n        this.X = X;\n        if (!this.knnIndices && !this.knnDistances) {\n            var knnResults = this.nearestNeighbors(X);\n            this.knnIndices = knnResults.knnIndices;\n            this.knnDistances = knnResults.knnDistances;\n        }\n        this.graph = this.fuzzySimplicialSet(X, this.nNeighbors, this.setOpMixRatio);\n        this.makeSearchFns();\n        this.searchGraph = this.makeSearchGraph(X);\n        this.processGraphForSupervisedProjection();\n        var _a = this.initializeSimplicialSetEmbedding(), head = _a.head, tail = _a.tail, epochsPerSample = _a.epochsPerSample;\n        this.optimizationState.head = head;\n        this.optimizationState.tail = tail;\n        this.optimizationState.epochsPerSample = epochsPerSample;\n        this.initializeOptimization();\n        this.prepareForOptimizationLoop();\n        this.isInitialized = true;\n        return this.getNEpochs();\n    };\n    UMAP.prototype.makeSearchFns = function () {\n        var _a = nnDescent.makeInitializations(this.distanceFn), initFromTree = _a.initFromTree, initFromRandom = _a.initFromRandom;\n        this.initFromTree = initFromTree;\n        this.initFromRandom = initFromRandom;\n        this.search = nnDescent.makeInitializedNNSearch(this.distanceFn);\n    };\n    UMAP.prototype.makeSearchGraph = function (X) {\n        var knnIndices = this.knnIndices;\n        var knnDistances = this.knnDistances;\n        var dims = [X.length, X.length];\n        var searchGraph = new matrix.SparseMatrix([], [], [], dims);\n        for (var i = 0; i < knnIndices.length; i++) {\n            var knn = knnIndices[i];\n            var distances = knnDistances[i];\n            for (var j = 0; j < knn.length; j++) {\n                var neighbor = knn[j];\n                var distance = distances[j];\n                if (distance > 0) {\n                    searchGraph.set(i, neighbor, distance);\n                }\n            }\n        }\n        var transpose = matrix.transpose(searchGraph);\n        return matrix.maximum(searchGraph, transpose);\n    };\n    UMAP.prototype.transform = function (toTransform) {\n        var _this = this;\n        var rawData = this.X;\n        if (rawData === undefined || rawData.length === 0) {\n            throw new Error('No data has been fit.');\n        }\n        var nNeighbors = Math.floor(this.nNeighbors * this.transformQueueSize);\n        nNeighbors = Math.min(rawData.length, nNeighbors);\n        var init = nnDescent.initializeSearch(this.rpForest, rawData, toTransform, nNeighbors, this.initFromRandom, this.initFromTree, this.random);\n        var result = this.search(rawData, this.searchGraph, init, toTransform);\n        var _a = heap.deheapSort(result), indices = _a.indices, distances = _a.weights;\n        indices = indices.map(function (x) { return x.slice(0, _this.nNeighbors); });\n        distances = distances.map(function (x) { return x.slice(0, _this.nNeighbors); });\n        var adjustedLocalConnectivity = Math.max(0, this.localConnectivity - 1);\n        var _b = this.smoothKNNDistance(distances, this.nNeighbors, adjustedLocalConnectivity), sigmas = _b.sigmas, rhos = _b.rhos;\n        var _c = this.computeMembershipStrengths(indices, distances, sigmas, rhos), rows = _c.rows, cols = _c.cols, vals = _c.vals;\n        var size = [toTransform.length, rawData.length];\n        var graph = new matrix.SparseMatrix(rows, cols, vals, size);\n        var normed = matrix.normalize(graph, \"l1\");\n        var csrMatrix = matrix.getCSR(normed);\n        var nPoints = toTransform.length;\n        var eIndices = utils.reshape2d(csrMatrix.indices, nPoints, this.nNeighbors);\n        var eWeights = utils.reshape2d(csrMatrix.values, nPoints, this.nNeighbors);\n        var embedding = initTransform(eIndices, eWeights, this.embedding);\n        var nEpochs = this.nEpochs\n            ? this.nEpochs / 3\n            : graph.nRows <= 10000\n                ? 100\n                : 30;\n        var graphMax = graph\n            .getValues()\n            .reduce(function (max, val) { return (val > max ? val : max); }, 0);\n        graph = graph.map(function (value) { return (value < graphMax / nEpochs ? 0 : value); });\n        graph = matrix.eliminateZeros(graph);\n        var epochsPerSample = this.makeEpochsPerSample(graph.getValues(), nEpochs);\n        var head = graph.getRows();\n        var tail = graph.getCols();\n        this.assignOptimizationStateParameters({\n            headEmbedding: embedding,\n            tailEmbedding: this.embedding,\n            head: head,\n            tail: tail,\n            currentEpoch: 0,\n            nEpochs: nEpochs,\n            nVertices: graph.getDims()[1],\n            epochsPerSample: epochsPerSample,\n        });\n        this.prepareForOptimizationLoop();\n        return this.optimizeLayout();\n    };\n    UMAP.prototype.processGraphForSupervisedProjection = function () {\n        var _a = this, Y = _a.Y, X = _a.X;\n        if (Y) {\n            if (Y.length !== X.length) {\n                throw new Error('Length of X and y must be equal');\n            }\n            if (this.targetMetric === \"categorical\") {\n                var lt = this.targetWeight < 1.0;\n                var farDist = lt ? 2.5 * (1.0 / (1.0 - this.targetWeight)) : 1.0e12;\n                this.graph = this.categoricalSimplicialSetIntersection(this.graph, Y, farDist);\n            }\n        }\n    };\n    UMAP.prototype.step = function () {\n        var currentEpoch = this.optimizationState.currentEpoch;\n        if (currentEpoch < this.getNEpochs()) {\n            this.optimizeLayoutStep(currentEpoch);\n        }\n        return this.optimizationState.currentEpoch;\n    };\n    UMAP.prototype.getEmbedding = function () {\n        return this.embedding;\n    };\n    UMAP.prototype.nearestNeighbors = function (X) {\n        var _a = this, distanceFn = _a.distanceFn, nNeighbors = _a.nNeighbors;\n        var log2 = function (n) { return Math.log(n) / Math.log(2); };\n        var metricNNDescent = nnDescent.makeNNDescent(distanceFn, this.random);\n        var round = function (n) {\n            return n === 0.5 ? 0 : Math.round(n);\n        };\n        var nTrees = 5 + Math.floor(round(Math.pow(X.length, 0.5) / 20.0));\n        var nIters = Math.max(5, Math.floor(Math.round(log2(X.length))));\n        this.rpForest = tree.makeForest(X, nNeighbors, nTrees, this.random);\n        var leafArray = tree.makeLeafArray(this.rpForest);\n        var _b = metricNNDescent(X, leafArray, nNeighbors, nIters), indices = _b.indices, weights = _b.weights;\n        return { knnIndices: indices, knnDistances: weights };\n    };\n    UMAP.prototype.fuzzySimplicialSet = function (X, nNeighbors, setOpMixRatio) {\n        if (setOpMixRatio === void 0) { setOpMixRatio = 1.0; }\n        var _a = this, _b = _a.knnIndices, knnIndices = _b === void 0 ? [] : _b, _c = _a.knnDistances, knnDistances = _c === void 0 ? [] : _c, localConnectivity = _a.localConnectivity;\n        var _d = this.smoothKNNDistance(knnDistances, nNeighbors, localConnectivity), sigmas = _d.sigmas, rhos = _d.rhos;\n        var _e = this.computeMembershipStrengths(knnIndices, knnDistances, sigmas, rhos), rows = _e.rows, cols = _e.cols, vals = _e.vals;\n        var size = [X.length, X.length];\n        var sparseMatrix = new matrix.SparseMatrix(rows, cols, vals, size);\n        var transpose = matrix.transpose(sparseMatrix);\n        var prodMatrix = matrix.pairwiseMultiply(sparseMatrix, transpose);\n        var a = matrix.subtract(matrix.add(sparseMatrix, transpose), prodMatrix);\n        var b = matrix.multiplyScalar(a, setOpMixRatio);\n        var c = matrix.multiplyScalar(prodMatrix, 1.0 - setOpMixRatio);\n        var result = matrix.add(b, c);\n        return result;\n    };\n    UMAP.prototype.categoricalSimplicialSetIntersection = function (simplicialSet, target, farDist, unknownDist) {\n        if (unknownDist === void 0) { unknownDist = 1.0; }\n        var intersection = fastIntersection(simplicialSet, target, unknownDist, farDist);\n        intersection = matrix.eliminateZeros(intersection);\n        return resetLocalConnectivity(intersection);\n    };\n    UMAP.prototype.smoothKNNDistance = function (distances, k, localConnectivity, nIter, bandwidth) {\n        if (localConnectivity === void 0) { localConnectivity = 1.0; }\n        if (nIter === void 0) { nIter = 64; }\n        if (bandwidth === void 0) { bandwidth = 1.0; }\n        var target = (Math.log(k) / Math.log(2)) * bandwidth;\n        var rho = utils.zeros(distances.length);\n        var result = utils.zeros(distances.length);\n        for (var i = 0; i < distances.length; i++) {\n            var lo = 0.0;\n            var hi = Infinity;\n            var mid = 1.0;\n            var ithDistances = distances[i];\n            var nonZeroDists = ithDistances.filter(function (d) { return d > 0.0; });\n            if (nonZeroDists.length >= localConnectivity) {\n                var index = Math.floor(localConnectivity);\n                var interpolation = localConnectivity - index;\n                if (index > 0) {\n                    rho[i] = nonZeroDists[index - 1];\n                    if (interpolation > SMOOTH_K_TOLERANCE) {\n                        rho[i] +=\n                            interpolation * (nonZeroDists[index] - nonZeroDists[index - 1]);\n                    }\n                }\n                else {\n                    rho[i] = interpolation * nonZeroDists[0];\n                }\n            }\n            else if (nonZeroDists.length > 0) {\n                rho[i] = utils.max(nonZeroDists);\n            }\n            for (var n = 0; n < nIter; n++) {\n                var psum = 0.0;\n                for (var j = 1; j < distances[i].length; j++) {\n                    var d = distances[i][j] - rho[i];\n                    if (d > 0) {\n                        psum += Math.exp(-(d / mid));\n                    }\n                    else {\n                        psum += 1.0;\n                    }\n                }\n                if (Math.abs(psum - target) < SMOOTH_K_TOLERANCE) {\n                    break;\n                }\n                if (psum > target) {\n                    hi = mid;\n                    mid = (lo + hi) / 2.0;\n                }\n                else {\n                    lo = mid;\n                    if (hi === Infinity) {\n                        mid *= 2;\n                    }\n                    else {\n                        mid = (lo + hi) / 2.0;\n                    }\n                }\n            }\n            result[i] = mid;\n            if (rho[i] > 0.0) {\n                var meanIthDistances = utils.mean(ithDistances);\n                if (result[i] < MIN_K_DIST_SCALE * meanIthDistances) {\n                    result[i] = MIN_K_DIST_SCALE * meanIthDistances;\n                }\n            }\n            else {\n                var meanDistances = utils.mean(distances.map(utils.mean));\n                if (result[i] < MIN_K_DIST_SCALE * meanDistances) {\n                    result[i] = MIN_K_DIST_SCALE * meanDistances;\n                }\n            }\n        }\n        return { sigmas: result, rhos: rho };\n    };\n    UMAP.prototype.computeMembershipStrengths = function (knnIndices, knnDistances, sigmas, rhos) {\n        var nSamples = knnIndices.length;\n        var nNeighbors = knnIndices[0].length;\n        var rows = utils.zeros(nSamples * nNeighbors);\n        var cols = utils.zeros(nSamples * nNeighbors);\n        var vals = utils.zeros(nSamples * nNeighbors);\n        for (var i = 0; i < nSamples; i++) {\n            for (var j = 0; j < nNeighbors; j++) {\n                var val = 0;\n                if (knnIndices[i][j] === -1) {\n                    continue;\n                }\n                if (knnIndices[i][j] === i) {\n                    val = 0.0;\n                }\n                else if (knnDistances[i][j] - rhos[i] <= 0.0) {\n                    val = 1.0;\n                }\n                else {\n                    val = Math.exp(-((knnDistances[i][j] - rhos[i]) / sigmas[i]));\n                }\n                rows[i * nNeighbors + j] = i;\n                cols[i * nNeighbors + j] = knnIndices[i][j];\n                vals[i * nNeighbors + j] = val;\n            }\n        }\n        return { rows: rows, cols: cols, vals: vals };\n    };\n    UMAP.prototype.initializeSimplicialSetEmbedding = function () {\n        var _this = this;\n        var nEpochs = this.getNEpochs();\n        var nComponents = this.nComponents;\n        var graphValues = this.graph.getValues();\n        var graphMax = 0;\n        for (var i = 0; i < graphValues.length; i++) {\n            var value = graphValues[i];\n            if (graphMax < graphValues[i]) {\n                graphMax = value;\n            }\n        }\n        var graph = this.graph.map(function (value) {\n            if (value < graphMax / nEpochs) {\n                return 0;\n            }\n            else {\n                return value;\n            }\n        });\n        this.embedding = utils.zeros(graph.nRows).map(function () {\n            return utils.zeros(nComponents).map(function () {\n                return utils.tauRand(_this.random) * 20 + -10;\n            });\n        });\n        var weights = [];\n        var head = [];\n        var tail = [];\n        var rowColValues = graph.getAll();\n        for (var i = 0; i < rowColValues.length; i++) {\n            var entry = rowColValues[i];\n            if (entry.value) {\n                weights.push(entry.value);\n                tail.push(entry.row);\n                head.push(entry.col);\n            }\n        }\n        var epochsPerSample = this.makeEpochsPerSample(weights, nEpochs);\n        return { head: head, tail: tail, epochsPerSample: epochsPerSample };\n    };\n    UMAP.prototype.makeEpochsPerSample = function (weights, nEpochs) {\n        var result = utils.filled(weights.length, -1.0);\n        var max = utils.max(weights);\n        var nSamples = weights.map(function (w) { return (w / max) * nEpochs; });\n        nSamples.forEach(function (n, i) {\n            if (n > 0)\n                result[i] = nEpochs / nSamples[i];\n        });\n        return result;\n    };\n    UMAP.prototype.assignOptimizationStateParameters = function (state) {\n        Object.assign(this.optimizationState, state);\n    };\n    UMAP.prototype.prepareForOptimizationLoop = function () {\n        var _a = this, repulsionStrength = _a.repulsionStrength, learningRate = _a.learningRate, negativeSampleRate = _a.negativeSampleRate;\n        var _b = this.optimizationState, epochsPerSample = _b.epochsPerSample, headEmbedding = _b.headEmbedding, tailEmbedding = _b.tailEmbedding;\n        var dim = headEmbedding[0].length;\n        var moveOther = headEmbedding.length === tailEmbedding.length;\n        var epochsPerNegativeSample = epochsPerSample.map(function (e) { return e / negativeSampleRate; });\n        var epochOfNextNegativeSample = __spread(epochsPerNegativeSample);\n        var epochOfNextSample = __spread(epochsPerSample);\n        this.assignOptimizationStateParameters({\n            epochOfNextSample: epochOfNextSample,\n            epochOfNextNegativeSample: epochOfNextNegativeSample,\n            epochsPerNegativeSample: epochsPerNegativeSample,\n            moveOther: moveOther,\n            initialAlpha: learningRate,\n            alpha: learningRate,\n            gamma: repulsionStrength,\n            dim: dim,\n        });\n    };\n    UMAP.prototype.initializeOptimization = function () {\n        var headEmbedding = this.embedding;\n        var tailEmbedding = this.embedding;\n        var _a = this.optimizationState, head = _a.head, tail = _a.tail, epochsPerSample = _a.epochsPerSample;\n        var nEpochs = this.getNEpochs();\n        var nVertices = this.graph.nCols;\n        var _b = findABParams(this.spread, this.minDist), a = _b.a, b = _b.b;\n        this.assignOptimizationStateParameters({\n            headEmbedding: headEmbedding,\n            tailEmbedding: tailEmbedding,\n            head: head,\n            tail: tail,\n            epochsPerSample: epochsPerSample,\n            a: a,\n            b: b,\n            nEpochs: nEpochs,\n            nVertices: nVertices,\n        });\n    };\n    UMAP.prototype.optimizeLayoutStep = function (n) {\n        var optimizationState = this.optimizationState;\n        var head = optimizationState.head, tail = optimizationState.tail, headEmbedding = optimizationState.headEmbedding, tailEmbedding = optimizationState.tailEmbedding, epochsPerSample = optimizationState.epochsPerSample, epochOfNextSample = optimizationState.epochOfNextSample, epochOfNextNegativeSample = optimizationState.epochOfNextNegativeSample, epochsPerNegativeSample = optimizationState.epochsPerNegativeSample, moveOther = optimizationState.moveOther, initialAlpha = optimizationState.initialAlpha, alpha = optimizationState.alpha, gamma = optimizationState.gamma, a = optimizationState.a, b = optimizationState.b, dim = optimizationState.dim, nEpochs = optimizationState.nEpochs, nVertices = optimizationState.nVertices;\n        var clipValue = 4.0;\n        for (var i = 0; i < epochsPerSample.length; i++) {\n            if (epochOfNextSample[i] > n) {\n                continue;\n            }\n            var j = head[i];\n            var k = tail[i];\n            var current = headEmbedding[j];\n            var other = tailEmbedding[k];\n            var distSquared = rDist(current, other);\n            var gradCoeff = 0;\n            if (distSquared > 0) {\n                gradCoeff = -2.0 * a * b * Math.pow(distSquared, b - 1.0);\n                gradCoeff /= a * Math.pow(distSquared, b) + 1.0;\n            }\n            for (var d = 0; d < dim; d++) {\n                var gradD = clip(gradCoeff * (current[d] - other[d]), clipValue);\n                current[d] += gradD * alpha;\n                if (moveOther) {\n                    other[d] += -gradD * alpha;\n                }\n            }\n            epochOfNextSample[i] += epochsPerSample[i];\n            var nNegSamples = Math.floor((n - epochOfNextNegativeSample[i]) / epochsPerNegativeSample[i]);\n            for (var p = 0; p < nNegSamples; p++) {\n                var k_1 = utils.tauRandInt(nVertices, this.random);\n                var other_1 = tailEmbedding[k_1];\n                var distSquared_1 = rDist(current, other_1);\n                var gradCoeff_1 = 0.0;\n                if (distSquared_1 > 0.0) {\n                    gradCoeff_1 = 2.0 * gamma * b;\n                    gradCoeff_1 /=\n                        (0.001 + distSquared_1) * (a * Math.pow(distSquared_1, b) + 1);\n                }\n                else if (j === k_1) {\n                    continue;\n                }\n                for (var d = 0; d < dim; d++) {\n                    var gradD = 4.0;\n                    if (gradCoeff_1 > 0.0) {\n                        gradD = clip(gradCoeff_1 * (current[d] - other_1[d]), clipValue);\n                    }\n                    current[d] += gradD * alpha;\n                }\n            }\n            epochOfNextNegativeSample[i] += nNegSamples * epochsPerNegativeSample[i];\n        }\n        optimizationState.alpha = initialAlpha * (1.0 - n / nEpochs);\n        optimizationState.currentEpoch += 1;\n        return headEmbedding;\n    };\n    UMAP.prototype.optimizeLayoutAsync = function (epochCallback) {\n        var _this = this;\n        if (epochCallback === void 0) { epochCallback = function () { return true; }; }\n        return new Promise(function (resolve, reject) {\n            var step = function () { return __awaiter(_this, void 0, void 0, function () {\n                var _a, nEpochs, currentEpoch, epochCompleted, shouldStop, isFinished;\n                return __generator(this, function (_b) {\n                    try {\n                        _a = this.optimizationState, nEpochs = _a.nEpochs, currentEpoch = _a.currentEpoch;\n                        this.embedding = this.optimizeLayoutStep(currentEpoch);\n                        epochCompleted = this.optimizationState.currentEpoch;\n                        shouldStop = epochCallback(epochCompleted) === false;\n                        isFinished = epochCompleted === nEpochs;\n                        if (!shouldStop && !isFinished) {\n                            setTimeout(function () { return step(); }, 0);\n                        }\n                        else {\n                            return [2, resolve(isFinished)];\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                    return [2];\n                });\n            }); };\n            setTimeout(function () { return step(); }, 0);\n        });\n    };\n    UMAP.prototype.optimizeLayout = function (epochCallback) {\n        if (epochCallback === void 0) { epochCallback = function () { return true; }; }\n        var isFinished = false;\n        var embedding = [];\n        while (!isFinished) {\n            var _a = this.optimizationState, nEpochs = _a.nEpochs, currentEpoch = _a.currentEpoch;\n            embedding = this.optimizeLayoutStep(currentEpoch);\n            var epochCompleted = this.optimizationState.currentEpoch;\n            var shouldStop = epochCallback(epochCompleted) === false;\n            isFinished = epochCompleted === nEpochs || shouldStop;\n        }\n        return embedding;\n    };\n    UMAP.prototype.getNEpochs = function () {\n        var graph = this.graph;\n        if (this.nEpochs > 0) {\n            return this.nEpochs;\n        }\n        var length = graph.nRows;\n        if (length <= 2500) {\n            return 500;\n        }\n        else if (length <= 5000) {\n            return 400;\n        }\n        else if (length <= 7500) {\n            return 300;\n        }\n        else {\n            return 200;\n        }\n    };\n    return UMAP;\n}());\nexports.UMAP = UMAP;\nfunction euclidean(x, y) {\n    var result = 0;\n    for (var i = 0; i < x.length; i++) {\n        result += Math.pow((x[i] - y[i]), 2);\n    }\n    return Math.sqrt(result);\n}\nexports.euclidean = euclidean;\nfunction cosine(x, y) {\n    var result = 0.0;\n    var normX = 0.0;\n    var normY = 0.0;\n    for (var i = 0; i < x.length; i++) {\n        result += x[i] * y[i];\n        normX += Math.pow(x[i], 2);\n        normY += Math.pow(y[i], 2);\n    }\n    if (normX === 0 && normY === 0) {\n        return 0;\n    }\n    else if (normX === 0 || normY === 0) {\n        return 1.0;\n    }\n    else {\n        return 1.0 - result / Math.sqrt(normX * normY);\n    }\n}\nexports.cosine = cosine;\nvar OptimizationState = (function () {\n    function OptimizationState() {\n        this.currentEpoch = 0;\n        this.headEmbedding = [];\n        this.tailEmbedding = [];\n        this.head = [];\n        this.tail = [];\n        this.epochsPerSample = [];\n        this.epochOfNextSample = [];\n        this.epochOfNextNegativeSample = [];\n        this.epochsPerNegativeSample = [];\n        this.moveOther = true;\n        this.initialAlpha = 1.0;\n        this.alpha = 1.0;\n        this.gamma = 1.0;\n        this.a = 1.5769434603113077;\n        this.b = 0.8950608779109733;\n        this.dim = 2;\n        this.nEpochs = 500;\n        this.nVertices = 0;\n    }\n    return OptimizationState;\n}());\nfunction clip(x, clipValue) {\n    if (x > clipValue)\n        return clipValue;\n    else if (x < -clipValue)\n        return -clipValue;\n    else\n        return x;\n}\nfunction rDist(x, y) {\n    var result = 0.0;\n    for (var i = 0; i < x.length; i++) {\n        result += Math.pow(x[i] - y[i], 2);\n    }\n    return result;\n}\nfunction findABParams(spread, minDist) {\n    var curve = function (_a) {\n        var _b = __read(_a, 2), a = _b[0], b = _b[1];\n        return function (x) {\n            return 1.0 / (1.0 + a * Math.pow(x, (2 * b)));\n        };\n    };\n    var xv = utils\n        .linear(0, spread * 3, 300)\n        .map(function (val) { return (val < minDist ? 1.0 : val); });\n    var yv = utils.zeros(xv.length).map(function (val, index) {\n        var gte = xv[index] >= minDist;\n        return gte ? Math.exp(-(xv[index] - minDist) / spread) : val;\n    });\n    var initialValues = [0.5, 0.5];\n    var data = { x: xv, y: yv };\n    var options = {\n        damping: 1.5,\n        initialValues: initialValues,\n        gradientDifference: 10e-2,\n        maxIterations: 100,\n        errorTolerance: 10e-3,\n    };\n    var parameterValues = ml_levenberg_marquardt_1.default(data, curve, options).parameterValues;\n    var _a = __read(parameterValues, 2), a = _a[0], b = _a[1];\n    return { a: a, b: b };\n}\nexports.findABParams = findABParams;\nfunction fastIntersection(graph, target, unknownDist, farDist) {\n    if (unknownDist === void 0) { unknownDist = 1.0; }\n    if (farDist === void 0) { farDist = 5.0; }\n    return graph.map(function (value, row, col) {\n        if (target[row] === -1 || target[col] === -1) {\n            return value * Math.exp(-unknownDist);\n        }\n        else if (target[row] !== target[col]) {\n            return value * Math.exp(-farDist);\n        }\n        else {\n            return value;\n        }\n    });\n}\nexports.fastIntersection = fastIntersection;\nfunction resetLocalConnectivity(simplicialSet) {\n    simplicialSet = matrix.normalize(simplicialSet, \"max\");\n    var transpose = matrix.transpose(simplicialSet);\n    var prodMatrix = matrix.pairwiseMultiply(transpose, simplicialSet);\n    simplicialSet = matrix.add(simplicialSet, matrix.subtract(transpose, prodMatrix));\n    return matrix.eliminateZeros(simplicialSet);\n}\nexports.resetLocalConnectivity = resetLocalConnectivity;\nfunction initTransform(indices, weights, embedding) {\n    var result = utils\n        .zeros(indices.length)\n        .map(function (z) { return utils.zeros(embedding[0].length); });\n    for (var i = 0; i < indices.length; i++) {\n        for (var j = 0; j < indices[0].length; j++) {\n            for (var d = 0; d < embedding[0].length; d++) {\n                var a = indices[i][j];\n                result[i][d] += weights[i][j] * embedding[a][d];\n            }\n        }\n    }\n    return result;\n}\nexports.initTransform = initTransform;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar umap_1 = require(\"./umap\");\nObject.defineProperty(exports, \"UMAP\", { enumerable: true, get: function () { return umap_1.UMAP; } });\n"],
  "mappings": "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",
  "names": ["sum", "max", "SparseMatrix", "_a", "row", "col", "value", "FlatTree", "init_src", "step", "UMAP", "d", "value", "OptimizationState", "_a", "a", "b"]
}
